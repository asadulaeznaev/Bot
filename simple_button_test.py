#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –±–ª–æ–∫—á–µ–π–Ω–∞"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_handlers_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        from main import BotApp
        from config import BotConfig, TokenConfig
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤
        config = BotConfig()
        token_config = TokenConfig()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        class DummyLedger:
            pass
        
        bot_app = BotApp.__new__(BotApp)  # –°–æ–∑–¥–∞–µ–º –±–µ–∑ __init__
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handler_methods = [
            'handle_farming_menu_callback',
            'handle_stake_hkn_callback', 
            'handle_unstake_hkn_callback',
            'handle_claim_rewards_callback',
            'handle_my_stakes_callback',
            'handle_boosters_store_callback',
            'handle_buy_booster_callback',
            'handle_history_callback',
            'handle_history_page_callback',
            'handle_token_info_callback',
            'handle_marketcap_callback',
            'handle_sell_hkn_prompt_callback',
            'handle_noop_callback'
        ]
        
        print("üìã –ü—Ä–æ–≤–µ—Ä—è—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:")
        missing_count = 0
        
        for method_name in handler_methods:
            if hasattr(BotApp, method_name):
                print(f"  ‚úÖ {method_name}")
            else:
                print(f"  ‚ùå {method_name} - –ù–ï –ù–ê–ô–î–ï–ù")
                missing_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handler_classes = [
            'FarmingHandler',
            'HistoryHandler', 
            'TokenInfoHandler',
            'SellHandler'
        ]
        
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª–∞—Å—Å—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:")
        
        from main import FarmingHandler, HistoryHandler, TokenInfoHandler, SellHandler
        
        for class_name in handler_classes:
            try:
                cls = globals()[class_name] if class_name in globals() else getattr(sys.modules['main'], class_name)
                print(f"  ‚úÖ {class_name}")
            except AttributeError:
                print(f"  ‚ùå {class_name} - –ù–ï –ù–ê–ô–î–ï–ù")
                missing_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data –≤ KeyboardBuilder
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
        
        from main import KeyboardBuilder
        
        try:
            main_kb = KeyboardBuilder.main_menu()
            farming_kb = KeyboardBuilder.farming_menu()
            token_kb = KeyboardBuilder.token_info()
            confirm_kb = KeyboardBuilder.confirm_send()
            
            print("  ‚úÖ KeyboardBuilder.main_menu()")
            print("  ‚úÖ KeyboardBuilder.farming_menu()")
            print("  ‚úÖ KeyboardBuilder.token_info()")
            print("  ‚úÖ KeyboardBuilder.confirm_send()")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ KeyboardBuilder: {e}")
            missing_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        if missing_count == 0:
            print("üéâ –í–°–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò –ö–ù–û–ü–ö–ò –ù–ê–ô–î–ï–ù–´!")
            print("‚úÖ –ö–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {missing_count}")
        
        return missing_count == 0
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_callback_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ callback_data –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è callback_data...")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ callback_data –∏–∑ –∫–Ω–æ–ø–æ–∫
    expected_callbacks = {
        "go_farming_menu": "–ú–µ–Ω—é —Ñ–∞—Ä–º–∏–Ω–≥–∞",
        "farm_stake_hkn": "–°—Ç–µ–π–∫–∏–Ω–≥ HKN", 
        "farm_unstake_hkn": "–°–Ω—è—Ç–∏–µ —Å—Ç–µ–π–∫–∞",
        "farm_claim_rewards": "–°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥",
        "farm_my_stakes": "–ú–æ–∏ —Å—Ç–µ–π–∫–∏",
        "farm_boosters_store": "–ú–∞–≥–∞–∑–∏–Ω —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π",
        "show_history": "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
        "token_info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ",
        "show_marketcap": "–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è",
        "sell_hkn_prompt": "–ü—Ä–æ–¥–∞–∂–∞ HKN",
        "show_balance": "–ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞",
        "send_hkn": "–û—Ç–ø—Ä–∞–≤–∫–∞ HKN",
        "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    }
    
    print("üìã Callback'–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫:")
    for callback, description in expected_callbacks.items():
        print(f"  üìå {callback} -> {description}")
    
    print(f"\n‚úÖ –í—Å–µ–≥–æ callback'–æ–≤: {len(expected_callbacks)}")
    return True

if __name__ == "__main__":
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞\n")
    
    success1 = test_handlers_exist()
    success2 = test_callback_data()
    
    if success1 and success2:
        print("\nüéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üöÄ –ë–ª–æ–∫—á–µ–π–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!")
    else:
        print("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 run.py")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π BOT_TOKEN –≤ config.py")