import os
import asyncio
# Removed aiosqlite and dataclass as they are no longer directly used in main .py
from telebot.async_telebot import AsyncTeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
# Removed State, StatesGroup as they are in bot_states.py
from telebot.asyncio_filters import StateFilter

# Imports from new modules
from config import BotConfig, TokenConfig
# from models import Token, Wallet, Transaction # Removed as they are not directly used in main.py
from database import DatabaseManager
from ledger import LedgerManager
from bot_states import UserStates

class BotApp:
    def __init__(self, token: str, admin_ids: list[int], ledger_manager: LedgerManager):
        self.bot = AsyncTeleBot(token)
        self.admin_ids = admin_ids
        self.ledger_manager = ledger_manager
        # Make sure TokenConfig is available for formatting strings
        self.token_config = TokenConfig()
        self.bot.add_custom_filter(StateFilter(self.bot))
        self._register_handlers()

    def _main_menu_keyboard(self):
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("üí∞ –ú–æ–π –ë–∞–ª–∞–Ω—Å", callback_data="show_balance"))
        markup.row(InlineKeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å HKN", callback_data="send_hkn"))
        markup.row(InlineKeyboardButton("‚ÑπÔ∏è –û –¢–æ–∫–µ–Ω–µ", callback_data="token_info"))
        return markup

    def _balance_menu_keyboard(self):
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_balance"))
        markup.row(InlineKeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å HKN", callback_data="send_hkn"))
        markup.row(InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"))
        return markup

    def _token_info_keyboard(self):
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("üìä –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="show_marketcap"))
        markup.row(InlineKeyboardButton("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        return markup

    def _confirm_send_keyboard(self):
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_send"),
                   InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_send"))
        return markup

    async def _is_admin(self, user_id: int) -> bool:
        return user_id in self.admin_ids

    def _register_handlers(self):
        self.bot.message_handler(commands=['start'])(self.handle_start)
        self.bot.message_handler(commands=['balance'])(self.handle_balance_command)
        self.bot.message_handler(commands=['tokeninfo'])(self.handle_token_info_command)
        self.bot.message_handler(commands=['marketcap'])(self.handle_market_cap_command)
        self.bot.message_handler(commands=['send'])(self.handle_send_command)
        self.bot.message_handler(commands=['setprice'])(self.handle_admin_set_price_command)
        self.bot.message_handler(commands=['mint'])(self.handle_admin_mint_command)
        self.bot.message_handler(commands=['history'])(self.handle_history_command)

        self.bot.callback_query_handler(func=lambda call: call.data == 'show_balance')(self.handle_show_balance_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'send_hkn')(self.handle_send_hkn_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'token_info')(self.handle_token_info_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_marketcap')(self.handle_market_cap_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'main_menu')(self.handle_main_menu_callback)
        self.bot.callback_query_handler(func=lambda call: call.data in ['confirm_send', 'cancel_send'])(self.handle_send_confirmation_callback)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('history_page_'))(self.handle_history_pagination_callback)

        self.bot.message_handler(state=UserStates.WAITING_FOR_RECIPIENT)(self.handle_waiting_for_recipient)
        self.bot.message_handler(state=UserStates.WAITING_FOR_AMOUNT)(self.handle_waiting_for_amount)
        self.bot.message_handler(state=UserStates.ADMIN_SET_PRICE)(self.handle_admin_set_price_input)
        self.bot.message_handler(state=UserStates.ADMIN_MINT_RECIPIENT)(self.handle_admin_mint_recipient_input)
        self.bot.message_handler(state=UserStates.ADMIN_MINT_AMOUNT)(self.handle_admin_mint_amount_input)

    async def handle_start(self, message):
        user_id = message.from_user.id
        username = message.from_user.username
        wallet = await self.ledger_manager.get_wallet(user_id)
        if not wallet:
            await self.ledger_manager.create_wallet(user_id, username)
            await self.bot.send_message(user_id,
                                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HelgyKoin! "
                                        f"–í–∞—à –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω, –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {self.token_config.STARTUP_BONUS:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL} –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞.",
                                        reply_markup=self._main_menu_keyboard())
        else:
            await self.bot.send_message(user_id, "–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", reply_markup=self._main_menu_keyboard())

    async def handle_balance_command(self, message):
        await self._show_balance(message.chat.id, message.from_user.id)

    async def handle_show_balance_callback(self, call):
        await self.bot.answer_callback_query(call.id)
        await self._show_balance(call.message.chat.id, call.from_user.id, call.message.message_id)

    async def _show_balance(self, chat_id, user_id, message_id=None):
        wallet = await self.ledger_manager.get_wallet(user_id)
        if wallet:
            balance_str = f"–í–∞—à –±–∞–ª–∞–Ω—Å: `{wallet.balance:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}`"
            if message_id:
                await self.bot.edit_message_text(balance_str, chat_id, message_id, reply_markup=self._balance_menu_keyboard(), parse_mode='Markdown')
            else:
                await self.bot.send_message(chat_id, balance_str, reply_markup=self._balance_menu_keyboard(), parse_mode='Markdown')
        else:
            await self.bot.send_message(chat_id, "–í–∞—à –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=self._main_menu_keyboard())

    async def handle_send_command(self, message):
        args = message.text.split()
        if len(args) == 3:
            recipient_str = args[1]
            amount_str = args[2]
            await self._process_send_direct(message, recipient_str, amount_str)
        else:
            await self.bot.send_message(message.chat.id, "–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (username –∏–ª–∏ ID) –∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: `/send @username 100` –∏–ª–∏ `/send 123456789 100`", parse_mode='Markdown')
            await self.bot.set_state(message.from_user.id, UserStates.WAITING_FOR_RECIPIENT, message.chat.id)
            await self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")

    async def handle_send_hkn_callback(self, call):
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, UserStates.WAITING_FOR_RECIPIENT, call.message.chat.id)
        await self.bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")

    async def handle_waiting_for_recipient(self, message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        recipient_str = message.text.strip()

        try:
            recipient_id = int(recipient_str)
        except ValueError:
            if recipient_str.startswith('@'):
                recipient_username = recipient_str[1:]
                recipient_wallet = await self.ledger_manager.db_manager.fetch_one("SELECT user_id FROM wallets WHERE username = ?", (recipient_username,))
                if recipient_wallet:
                    recipient_id = recipient_wallet['user_id']
                else:
                    await self.bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID:")
                    return
            else:
                await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –∏–ª–∏ username:")
                return

        if recipient_id == user_id:
            await self.bot.send_message(chat_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã —Å–∞–º–æ–º—É —Å–µ–±–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
            return

        recipient_wallet_exists = await self.ledger_manager.get_wallet(recipient_id)
        if not recipient_wallet_exists:
            await self.bot.send_message(chat_id, "–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID:")
            return

        async with self.bot.retrieve_data(user_id, chat_id) as data:
            data['recipient_id'] = recipient_id
        await self.bot.set_state(user_id, UserStates.WAITING_FOR_AMOUNT, chat_id)
        await self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")

    async def handle_waiting_for_amount(self, message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        amount_str = message.text.strip()

        try:
            amount = float(amount_str)
            if amount <= 0:
                raise ValueError
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
            return

        async with self.bot.retrieve_data(user_id, chat_id) as data:
            recipient_id = data.get('recipient_id')
            data['amount'] = amount

        sender_wallet = await self.ledger_manager.get_wallet(user_id)
        if not sender_wallet or sender_wallet.balance < amount:
            await self.bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.")
            await self.bot.delete_state(user_id, chat_id)
            return

        recipient_wallet = await self.ledger_manager.get_wallet(recipient_id)
        recipient_info = recipient_wallet.username if recipient_wallet and recipient_wallet.username else str(recipient_id)

        await self.bot.send_message(chat_id,
                                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ `{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *{recipient_info}*?",
                                    reply_markup=self._confirm_send_keyboard(), parse_mode='Markdown')
        await self.bot.set_state(user_id, UserStates.CONFIRMING_SEND, chat_id)

    async def handle_send_confirmation_callback(self, call):
        await self.bot.answer_callback_query(call.id)
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        if call.data == 'confirm_send':
            async with self.bot.retrieve_data(user_id, chat_id) as data:
                recipient_id = data.get('recipient_id')
                amount = data.get('amount')

            success = await self.ledger_manager.execute_transfer(user_id, recipient_id, amount)
            if success:
                recipient_wallet = await self.ledger_manager.get_wallet(recipient_id)
                recipient_info = recipient_wallet.username if recipient_wallet and recipient_wallet.username else str(recipient_id)
                await self.bot.edit_message_text(f"–ü–µ—Ä–µ–≤–æ–¥ `{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *{recipient_info}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.",
                                                 chat_id, call.message.message_id, parse_mode='Markdown', reply_markup=self._main_menu_keyboard())
            else:
                await self.bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                                                 chat_id, call.message.message_id, reply_markup=self._main_menu_keyboard())
        else:
            await self.bot.edit_message_text("–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.", chat_id, call.message.message_id, reply_markup=self._main_menu_keyboard())

        await self.bot.delete_state(user_id, chat_id)

    async def _process_send_direct(self, message, recipient_str, amount_str):
        user_id = message.from_user.id
        chat_id = message.chat.id

        try:
            recipient_id = int(recipient_str)
        except ValueError:
            if recipient_str.startswith('@'):
                recipient_username = recipient_str[1:]
                recipient_wallet = await self.ledger_manager.db_manager.fetch_one("SELECT user_id FROM wallets WHERE username = ?", (recipient_username,))
                if recipient_wallet:
                    recipient_id = recipient_wallet['user_id']
                else:
                    await self.bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
            else:
                await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
                return

        try:
            amount = float(amount_str)
            if amount <= 0:
                raise ValueError
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.")
            return

        if recipient_id == user_id:
            await self.bot.send_message(chat_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return

        sender_wallet = await self.ledger_manager.get_wallet(user_id)
        if not sender_wallet or sender_wallet.balance < amount:
            await self.bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ.")
            return

        recipient_wallet_exists = await self.ledger_manager.get_wallet(recipient_id)
        if not recipient_wallet_exists:
            await self.bot.send_message(chat_id, "–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        async with self.bot.retrieve_data(user_id, chat_id) as data:
            data['recipient_id'] = recipient_id
            data['amount'] = amount

        recipient_info = recipient_wallet_exists.username if recipient_wallet_exists.username else str(recipient_id)

        await self.bot.send_message(chat_id,
                                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ `{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *{recipient_info}*?",
                                    reply_markup=self._confirm_send_keyboard(), parse_mode='Markdown')
        await self.bot.set_state(user_id, UserStates.CONFIRMING_SEND, chat_id)

    async def handle_token_info_command(self, message):
        await self._show_token_info(message.chat.id, message.message_id)

    async def handle_token_info_callback(self, call):
        await self.bot.answer_callback_query(call.id)
        await self._show_token_info(call.message.chat.id, call.message.message_id)

    async def _show_token_info(self, chat_id, message_id=None):
        token_info_obj = await self.ledger_manager.get_token_info()
        info_message = (
            f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ {token_info_obj.name}:**\n"
            f"–°–∏–º–≤–æ–ª: `{token_info_obj.symbol}`\n"
            f"–î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏: `{token_info_obj.decimals}`\n"
            f"–û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: `{token_info_obj.total_supply:.{token_info_obj.decimals}f} {token_info_obj.symbol}`\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `${token_info_obj.current_price:.{self.token_config.DECIMALS}f}`"
        )
        if message_id:
            await self.bot.edit_message_text(info_message, chat_id, message_id, parse_mode='Markdown', reply_markup=self._token_info_keyboard())
        else:
            await self.bot.send_message(chat_id, info_message, parse_mode='Markdown', reply_markup=self._token_info_keyboard())

    async def handle_market_cap_command(self, message):
        await self._show_market_cap(message.chat.id, message.message_id)

    async def handle_market_cap_callback(self, call):
        await self.bot.answer_callback_query(call.id)
        await self._show_market_cap(call.message.chat.id, call.message.message_id)

    async def _show_market_cap(self, chat_id, message_id=None):
        market_cap = await self.ledger_manager.calculate_market_cap()
        cap_message = f"–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è {self.token_config.SYMBOL}: `${market_cap:.2f}`"
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚ÑπÔ∏è –û –¢–æ–∫–µ–Ω–µ", callback_data="token_info"))
        markup.row(InlineKeyboardButton("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        if message_id:
            await self.bot.edit_message_text(cap_message, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            await self.bot.send_message(chat_id, cap_message, parse_mode='Markdown', reply_markup=markup)

    async def handle_main_menu_callback(self, call):
        await self.bot.answer_callback_query(call.id)
        await self.bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", call.message.chat.id, call.message.message_id, reply_markup=self._main_menu_keyboard())

    async def handle_admin_set_price_command(self, message):
        if not await self._is_admin(message.from_user.id):
            await self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        await self.bot.set_state(message.from_user.id, UserStates.ADMIN_SET_PRICE, message.chat.id)
        await self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è HKN (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.0001):")

    async def handle_admin_set_price_input(self, message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        try:
            new_price = float(message.text.strip())
            if new_price <= 0:
                raise ValueError
            await self.ledger_manager.set_token_price(new_price)
            await self.bot.send_message(chat_id, f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞ HKN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: `${new_price:.{self.token_config.DECIMALS}f}`")
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        finally:
            await self.bot.delete_state(user_id, chat_id)
            await self.bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=self._main_menu_keyboard())

    async def handle_admin_mint_command(self, message):
        if not await self._is_admin(message.from_user.id):
            await self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        await self.bot.set_state(message.from_user.id, UserStates.ADMIN_MINT_RECIPIENT, message.chat.id)
        await self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è —ç–º–∏—Å—Å–∏–∏:")

    async def handle_admin_mint_recipient_input(self, message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        recipient_str = message.text.strip()
        try:
            recipient_id = int(recipient_str)
            recipient_wallet = await self.ledger_manager.get_wallet(recipient_id)
            if not recipient_wallet:
                await self.bot.send_message(chat_id, "–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /start.")
                await self.bot.delete_state(user_id, chat_id)
                await self.bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=self._main_menu_keyboard())
                return

            async with self.bot.retrieve_data(user_id, chat_id) as data:
                data['mint_recipient_id'] = recipient_id
            await self.bot.set_state(user_id, UserStates.ADMIN_MINT_AMOUNT, chat_id)
            await self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É HKN –¥–ª—è —ç–º–∏—Å—Å–∏–∏:")
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            await self.bot.delete_state(user_id, chat_id)
            await self.bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=self._main_menu_keyboard())

    async def handle_admin_mint_amount_input(self, message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        try:
            amount = float(message.text.strip())
            if amount <= 0:
                raise ValueError

            async with self.bot.retrieve_data(user_id, chat_id) as data:
                recipient_id = data.get('mint_recipient_id')

            success = await self.ledger_manager.mint_tokens(recipient_id, amount)
            if success:
                recipient_wallet = await self.ledger_manager.get_wallet(recipient_id)
                recipient_info = recipient_wallet.username if recipient_wallet and recipient_wallet.username else str(recipient_id)
                await self.bot.send_message(chat_id,
                                            f"–£—Å–ø–µ—à–Ω–æ —ç–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–æ `{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` –Ω–∞ –∫–æ—à–µ–ª–µ–∫ *{recipient_info}*.",
                                            parse_mode='Markdown')
            else:
                await self.bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–º–∏—Å—Å–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤.")
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        finally:
            await self.bot.delete_state(user_id, chat_id)
            await self.bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=self._main_menu_keyboard())

    async def handle_history_command(self, message):
        await self._show_history(message.chat.id, message.from_user.id)

    async def handle_history_pagination_callback(self, call):
        await self.bot.answer_callback_query(call.id)
        page = int(call.data.split('_')[-1])
        await self._show_history(call.message.chat.id, call.from_user.id, page=page, message_id=call.message.message_id)

    async def _show_history(self, chat_id, user_id, page=0, message_id=None):
        limit = 5
        offset = page * limit
        transactions = await self.ledger_manager.get_transaction_history(user_id, limit, offset)
        
        if not transactions:
            history_text = "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞." if page == 0 else "–ë–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç."
        else:
            history_lines = ["**–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:**"]
            for tx in transactions:
                direction = "–ø–æ–ª—É—á–µ–Ω–æ" if tx.receiver_id == user_id else "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                target_id = tx.sender_id if tx.receiver_id == user_id else tx.receiver_id
                
                target_wallet = await self.ledger_manager.get_wallet(target_id)
                target_info = target_wallet.username if target_wallet and target_wallet.username else f"ID {target_id}"
                
                if tx.sender_id == 0:
                    history_lines.append(f"‚Ä¢ `{tx.timestamp[:16]}`: `{tx.amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` —ç–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–æ –í–∞–º.")
                else:
                    history_lines.append(f"‚Ä¢ `{tx.timestamp[:16]}`: `{tx.amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` {direction} {target_info}")
            history_text = "\n".join(history_lines)
            
        markup = InlineKeyboardMarkup()
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_page_{page - 1}"))
        if len(transactions) == limit:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"history_page_{page + 1}"))
        if nav_buttons:
            markup.row(*nav_buttons)
        markup.row(InlineKeyboardButton("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        if message_id:
            await self.bot.edit_message_text(history_text, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            await self.bot.send_message(chat_id, history_text, parse_mode='Markdown', reply_markup=markup)

    def run(self):
        asyncio.run(self.bot.polling())

if __name__ == "__main__":
    # Initialize BotConfig and TokenConfig
    bot_config = BotConfig()
    # TokenConfig is already instantiated in BotApp if needed for string formatting there

    db_manager = DatabaseManager(bot_config.DB_PATH)
    asyncio.run(db_manager.init_db())
    ledger_manager = LedgerManager(db_manager)
    bot_app = BotApp(bot_config.BOT_TOKEN, bot_config.ADMIN_IDS, ledger_manager)
    bot_app.run()
