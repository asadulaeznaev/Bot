#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ Telegram API
"""

import asyncio
import sys
import os
from unittest.mock import AsyncMock, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from main import BotApp
from config import BotConfig, TokenConfig
from database import DatabaseManager
from ledger import LedgerManager

class MockTeleBot:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.callbacks = {}
        self.message_handlers = {}
        self.custom_filters = []
    
    def add_custom_filter(self, filter_obj):
        self.custom_filters.append(filter_obj)
    
    def callback_query_handler(self, func):
        def decorator(handler):
            self.callbacks[func.__name__] = (func, handler)
            return handler
        return decorator
    
    def message_handler(self, commands=None, state=None):
        def decorator(handler):
            key = f"commands_{commands}_state_{state}"
            self.message_handlers[key] = handler
            return handler
        return decorator
    
    async def answer_callback_query(self, callback_id):
        print(f"‚úÖ answer_callback_query({callback_id})")
    
    async def send_message(self, chat_id, text, reply_markup=None, parse_mode=None):
        print(f"‚úÖ send_message(chat_id={chat_id}, text='{text[:50]}...', markup={bool(reply_markup)})")
    
    async def edit_message_text(self, text, chat_id, message_id, reply_markup=None, parse_mode=None):
        print(f"‚úÖ edit_message_text(chat_id={chat_id}, message_id={message_id}, text='{text[:50]}...', markup={bool(reply_markup)})")
    
    async def set_state(self, user_id, state, chat_id):
        print(f"‚úÖ set_state(user_id={user_id}, state={state})")
    
    async def delete_state(self, user_id, chat_id):
        print(f"‚úÖ delete_state(user_id={user_id}, chat_id={chat_id})")

class MockCallbackQuery:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è callback query"""
    
    def __init__(self, callback_data, user_id=12345, chat_id=67890, message_id=111):
        self.data = callback_data
        self.id = "test_callback_id"
        self.from_user = MagicMock()
        self.from_user.id = user_id
        self.message = MagicMock()
        self.message.chat = MagicMock()
        self.message.chat.id = chat_id
        self.message.message_id = message_id

async def test_callback_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    config = BotConfig()
    config.DB_PATH = "test_callbacks.db"
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from config import PerformanceConfig
        db_manager = DatabaseManager(config.DB_PATH, PerformanceConfig())
        await db_manager.init_db()
        
        token_config = TokenConfig()
        ledger_manager = LedgerManager(db_manager, token_config)
        
        # –°–æ–∑–¥–∞–µ–º BotApp —Å –º–æ–∫-–±–æ—Ç–æ–º
        bot_app = BotApp(config, token_config, ledger_manager)
        bot_app.bot = MockTeleBot()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –º–æ–∫-–±–æ—Ç–æ–º
        bot_app._register_handlers()
        
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(bot_app.bot.callbacks)}")
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ message –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(bot_app.bot.message_handlers)}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 12345
        test_wallet = await ledger_manager.create_wallet(test_user_id, "test_user")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫: {test_wallet.balance} HKN")
        
        # –°–ø–∏—Å–æ–∫ callback_data –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_callbacks = [
            ("show_balance", "–ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞"),
            ("send_hkn", "–û—Ç–ø—Ä–∞–≤–∫–∞ HKN"),
            ("main_menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            ("go_farming_menu", "–ú–µ–Ω—é —Ñ–∞—Ä–º–∏–Ω–≥–∞"),
            ("farm_stake_hkn", "–°—Ç–µ–π–∫–∏–Ω–≥ HKN"),
            ("farm_unstake_hkn", "–°–Ω—è—Ç–∏–µ —Å—Ç–µ–π–∫–∞"),
            ("farm_claim_rewards", "–°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥"),
            ("farm_my_stakes", "–ú–æ–∏ —Å—Ç–µ–π–∫–∏"),
            ("farm_boosters_store", "–ú–∞–≥–∞–∑–∏–Ω —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π"),
            ("show_history", "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"),
            ("token_info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ"),
            ("show_marketcap", "–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è"),
            ("sell_hkn_prompt", "–ü—Ä–æ–¥–∞–∂–∞ HKN"),
            ("buy_booster_speed_24h_1.5x", "–ü–æ–∫—É–ø–∫–∞ —É—Å–∫–æ—Ä–∏—Ç–µ–ª—è"),
            ("history_page_1", "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏"),
            ("noop", "–ó–∞–≥–ª—É—à–∫–∞")
        ]
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:\n")
        
        success_count = 0
        for callback_data, description in test_callbacks:
            try:
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é: {description} (callback_data='{callback_data}')")
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                handler_found = False
                
                for func_name, (condition_func, handler_func) in bot_app.bot.callbacks.items():
                    mock_call = MockCallbackQuery(callback_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
                    try:
                        if condition_func(mock_call):
                            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {handler_func.__name__}")
                            
                            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                            await handler_func(mock_call)
                            print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                            
                            handler_found = True
                            success_count += 1
                            break
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —É—Å–ª–æ–≤–∏–∏: {e}")
                
                if not handler_found:
                    print(f"  ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è '{callback_data}'")
                
                print()
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ '{callback_data}': {e}")
                import traceback
                traceback.print_exc()
                print()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(test_callbacks)}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(test_callbacks) - success_count}")
        
        if success_count == len(test_callbacks):
            print("\nüéâ –í–°–ï –ö–ù–û–ü–ö–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        await db_manager.close()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        if os.path.exists(config.DB_PATH):
            os.remove(config.DB_PATH)
            print(f"üßπ –£–¥–∞–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î: {config.DB_PATH}")

if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫...")
    asyncio.run(test_callback_handlers())