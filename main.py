"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram –±–æ—Ç HelgyKoin —Å –û–û–ü –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤ 3 —Ä–∞–∑–∞
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any, Union
from abc import ABC, abstractmethod

from telebot.async_telebot import AsyncTeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from telebot.asyncio_filters import StateFilter

from config import BotConfig, TokenConfig, PerformanceConfig
from database import DatabaseManager
from ledger import LedgerManager
from bot_states import UserStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class BaseHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self, bot_app: 'BotApp'):
        self.bot_app = bot_app
        self.bot = bot_app.bot
        self.ledger_manager = bot_app.ledger_manager
        self.token_config = bot_app.token_config
        self.logger = logging.getLogger(self.__class__.__name__)

class KeyboardBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("üí∞ –ú–æ–π –ë–∞–ª–∞–Ω—Å", callback_data="show_balance"),
            InlineKeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å HKN", callback_data="send_hkn"),
            InlineKeyboardButton("üåæ –§–∞—Ä–º–∏–Ω–≥", callback_data="go_farming_menu"),
            InlineKeyboardButton("üè¶ –ü—Ä–æ–¥–∞—Ç—å HKN", callback_data="sell_hkn_prompt"),
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –¢–æ–∫–µ–Ω–µ", callback_data="token_info")
        )
        return markup
    
    @staticmethod
    def token_info() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üìä –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="show_marketcap"),
            InlineKeyboardButton("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        return markup
    
    @staticmethod
    def confirm_send() -> InlineKeyboardMarkup:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_send"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_send")
        )
        return markup
    
    @staticmethod
    def farming_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ñ–∞—Ä–º–∏–Ω–≥–∞"""
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("‚ûï –°—Ç–µ–π–∫–∞—Ç—å HKN", callback_data="farm_stake_hkn"),
            InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å HKN —Å–æ —Å—Ç–µ–π–∫–∞", callback_data="farm_unstake_hkn"),
            InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", callback_data="farm_claim_rewards"),
            InlineKeyboardButton("üìà –ú–æ–∏ –°—Ç–µ–π–∫–∏", callback_data="farm_my_stakes"),
            InlineKeyboardButton("üöÄ –£—Å–∫–æ—Ä–∏—Ç–µ–ª–∏", callback_data="farm_boosters_store"),
            InlineKeyboardButton("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        return markup
    
    @staticmethod
    def booster_store(boosters_info: dict, token_config) -> InlineKeyboardMarkup:
        """–ú–∞–≥–∞–∑–∏–Ω –±—É—Å—Ç–µ—Ä–æ–≤"""
        markup = InlineKeyboardMarkup(row_width=1)
        for key, booster_info in boosters_info.items():
            button_text = f"–ö—É–ø–∏—Ç—å '{booster_info['name_ru']}' ({booster_info['cost']:.{token_config.DECIMALS}f} HKN)"
            markup.add(InlineKeyboardButton(button_text, callback_data=f"buy_booster_{key}"))
        markup.add(InlineKeyboardButton("üîô –ú–µ–Ω—é –§–∞—Ä–º–∏–Ω–≥–∞", callback_data="go_farming_menu"))
        return markup
    
    @staticmethod
    def select_stake(stakes: list, action_prefix: str, token_config) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —Å—Ç–µ–π–∫–∞"""
        markup = InlineKeyboardMarkup(row_width=1)
        if not stakes:
            markup.add(InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤", callback_data="no_stakes_to_select"))
        else:
            for stake in stakes:
                pending_rewards_float = float(stake.get('pending_rewards', 0.0))
                button_text = (f"ID {stake['stake_id']}: {stake['amount']:.{token_config.DECIMALS}f} HKN "
                               f"(–ù–∞–≥—Ä–∞–¥–∞: {pending_rewards_float:.{token_config.DECIMALS}f})")
                markup.add(InlineKeyboardButton(button_text, callback_data=f"{action_prefix}_select_{stake['stake_id']}"))
        markup.add(InlineKeyboardButton("üîô –ú–µ–Ω—é –§–∞—Ä–º–∏–Ω–≥–∞", callback_data="go_farming_menu"))
        return markup
    
    @staticmethod
    def history_navigation(page: int, has_more: bool) -> InlineKeyboardMarkup:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"""
        markup = InlineKeyboardMarkup(row_width=2)
        nav = []
        if page > 0:
            nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"history_page_{page-1}"))
        if has_more:
            nav.append(InlineKeyboardButton("–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"history_page_{page+1}"))
        if nav:
            markup.add(*nav)
        markup.add(InlineKeyboardButton("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        return markup

class WalletHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ—à–µ–ª—å–∫–æ–º"""
    
    async def show_balance(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        wallet = await self.ledger_manager.get_wallet(user_id)
        if wallet:
            text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: `{wallet.balance:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}`"
        else:
            text = "–í–∞—à –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
        
        await self.bot_app.send_or_edit(
            chat_id, text, 
            reply_markup=KeyboardBuilder.main_menu(), 
            parse_mode='Markdown', 
            message_id=message_id
        )

class TransferHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    
    async def start_send_flow(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        await self.bot.set_state(user_id, UserStates.WAITING_FOR_RECIPIENT, chat_id)
        text = "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ) –∏–ª–∏ username (@username):"
        await self.bot_app.send_or_edit(chat_id, text, message_id=message_id)
    
    async def handle_recipient_input(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        recipient_str = message.text.strip()
        
        try:
            recipient_id, actual_recipient_str = await self._parse_recipient(recipient_str)
            if recipient_id == user_id:
                await self.bot.send_message(chat_id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–±–µ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
                return
        except ValueError as e:
            await self.bot.send_message(chat_id, str(e))
            return
        
        async with self.bot.retrieve_data(user_id, chat_id) as data:
            data['recipient_id'] = recipient_id
            data['recipient_str'] = actual_recipient_str
        
        await self.bot.set_state(user_id, UserStates.WAITING_FOR_AMOUNT, chat_id)
        await self.bot.send_message(chat_id, f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {actual_recipient_str}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    
    async def handle_amount_input(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        try:
            amount = float(message.text.strip())
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        wallet = await self.ledger_manager.get_wallet(user_id)
        if not wallet or not wallet.has_sufficient_balance(amount):
            await self.bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return
        
        async with self.bot.retrieve_data(user_id, chat_id) as data:
            data['amount'] = amount
            recipient_str = data.get('recipient_str', 'Unknown')
        
        text = (f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n"
                f"`{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *{recipient_str}*?")
        
        await self.bot.send_message(
            chat_id, text,
            reply_markup=KeyboardBuilder.confirm_send(),
            parse_mode='Markdown'
        )
        await self.bot.set_state(user_id, UserStates.CONFIRMING_SEND, chat_id)
    
    async def confirm_transfer(self, call: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        if call.data == 'cancel_send':
            response_text = "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω."
        else:
            async with self.bot.retrieve_data(user_id, chat_id) as data:
                recipient_id = data.get('recipient_id')
                amount = data.get('amount')
                recipient_str = data.get('recipient_str', str(recipient_id))
            
            if not recipient_id or amount is None:
                response_text = "–û—à–∏–±–∫–∞: –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                self.logger.warning(f"Transfer confirmation failed for user {user_id}: missing data")
            else:
                success, op_message = await self.ledger_manager.execute_transfer(user_id, recipient_id, amount)
                if success:
                    response_text = f"–ü–µ—Ä–µ–≤–æ–¥ `{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` –¥–ª—è *{recipient_str}* –≤—ã–ø–æ–ª–Ω–µ–Ω."
                    self.logger.info(f"Transfer successful: {user_id} to {recipient_id}, amount {amount}")
                else:
                    response_text = op_message or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞."
                    self.logger.error(f"Transfer failed: {user_id} to {recipient_id}, amount {amount}. Reason: {op_message}")
        
        await self.bot_app.send_or_edit(
            chat_id, response_text,
            reply_markup=KeyboardBuilder.main_menu(),
            parse_mode='Markdown',
            message_id=message_id
        )
        await self.bot.delete_state(user_id, chat_id)
    
    async def _parse_recipient(self, recipient_str: str) -> tuple[int, str]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        if recipient_str.startswith('@'):
            recipient_username = recipient_str[1:]
            recipient_wallet_row = await self.ledger_manager.db_manager.fetch_one(
                "SELECT user_id, username FROM wallets WHERE username = ?", 
                (recipient_username,)
            )
            if not recipient_wallet_row:
                raise ValueError("–ü–æ–ª—É—á–∞—Ç–µ–ª—å (username) –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ID:")
            return recipient_wallet_row['user_id'], f"@{recipient_wallet_row['username']}"
        else:
            try:
                recipient_id = int(recipient_str)
                recipient_wallet = await self.ledger_manager.get_wallet(recipient_id)
                if not recipient_wallet:
                    raise ValueError("–ü–æ–ª—É—á–∞—Ç–µ–ª—å (ID) –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return recipient_id, recipient_wallet.display_name
            except ValueError:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ username (@):")

class BotApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ —Å –û–û–ü –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self, bot_config: BotConfig, token_config: TokenConfig, ledger_manager: LedgerManager):
        self.bot_config = bot_config
        self.token_config = token_config
        self.ledger_manager = ledger_manager
        self.bot = AsyncTeleBot(bot_config.BOT_TOKEN)
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.wallet_handler = WalletHandler(self)
        self.transfer_handler = TransferHandler(self)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.bot.add_custom_filter(StateFilter(self.bot))
        self._register_handlers()
        
        self.logger.info("BotApp initialized with optimized architecture")
    
    async def send_or_edit(self, chat_id: int, text: str, reply_markup=None, parse_mode=None, message_id=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if message_id:
                await self.bot.edit_message_text(
                    text, chat_id, message_id, 
                    reply_markup=reply_markup, 
                    parse_mode=parse_mode
                )
            else:
                await self.bot.send_message(
                    chat_id, text, 
                    reply_markup=reply_markup, 
                    parse_mode=parse_mode
                )
        except Exception as e:
            self.logger.error(f"Error in send_or_edit: {e}")
            if "message is not modified" not in str(e).lower() and message_id:
                try:
                    await self.bot.send_message(
                        chat_id, text, 
                        reply_markup=reply_markup, 
                        parse_mode=parse_mode
                    )
                except Exception as e2:
                    self.logger.error(f"Fallback send_message failed: {e2}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['start'])(self.handle_start)
        self.bot.message_handler(commands=['cancel'], state='*')(self.handle_cancel)
        self.bot.message_handler(commands=['balance'])(self.handle_balance_command)
        self.bot.message_handler(commands=['send'])(self.handle_send_command)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_balance')(self.handle_show_balance_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'send_hkn')(self.handle_send_hkn_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'main_menu')(self.handle_main_menu_callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.bot.message_handler(state=UserStates.WAITING_FOR_RECIPIENT)(self.transfer_handler.handle_recipient_input)
        self.bot.message_handler(state=UserStates.WAITING_FOR_AMOUNT)(self.transfer_handler.handle_amount_input)
        self.bot.callback_query_handler(
            func=lambda call: call.data in ['confirm_send', 'cancel_send'], 
            state=UserStates.CONFIRMING_SEND
        )(self.transfer_handler.confirm_transfer)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_history')(self.handle_history_callback)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('history_page_'))(self.handle_history_pagination_callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
        self.bot.callback_query_handler(func=lambda call: call.data == 'token_info')(self.handle_token_info_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_marketcap')(self.handle_market_cap_callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
        self.bot.callback_query_handler(func=lambda call: call.data == 'go_farming_menu')(self.handle_go_farming_menu)
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_my_stakes')(self.handle_farm_my_stakes)
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_stake_hkn')(self.handle_farm_stake_hkn_prompt)
        self.bot.message_handler(state=UserStates.STAKING_AMOUNT)(self.handle_staking_amount_input)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ unstaking
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_unstake_hkn')(self.handle_farm_unstake_hkn_prompt)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('unstake_select_'))(self.handle_unstake_selection)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≥—Ä–∞–¥
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_claim_rewards')(self.handle_farm_claim_rewards_prompt)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('claim_select_'))(self.handle_claim_rewards_selection)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É—Å—Ç–µ—Ä–æ–≤
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_boosters_store')(self.handle_farm_boosters_store)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('buy_booster_'))(self.handle_buy_booster_prompt)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_buy_booster_') or call.data == 'go_booster_store_cancel')(self.handle_buy_booster_confirmation)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ HKN
        self.bot.callback_query_handler(func=lambda call: call.data == 'sell_hkn_prompt')(self.handle_sell_hkn_prompt)
        self.bot.message_handler(state=UserStates.SELLING_HKN_AMOUNT)(self.handle_sell_hkn_amount_input)
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['setprice'])(self.handle_admin_set_price)
        self.bot.message_handler(commands=['mint'])(self.handle_admin_mint)
        
        self.logger.info("All handlers registered successfully")
    
    async def handle_start(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
        user_id = message.from_user.id
        username = message.from_user.username
        
        wallet = await self.ledger_manager.get_wallet(user_id)
        if not wallet:
            await self.ledger_manager.create_wallet(user_id, username)
            text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HelgyKoin! "
                   f"–í–∞—à –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω, –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ "
                   f"{self.token_config.STARTUP_BONUS:.{self.token_config.DECIMALS}f} "
                   f"{self.token_config.SYMBOL} –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞.")
        else:
            text = "–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
        
        await self.bot.send_message(
            user_id, text, 
            reply_markup=KeyboardBuilder.main_menu()
        )
    
    async def handle_cancel(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        await self.bot.delete_state(user_id, chat_id)
        await self.bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await self.bot.send_message(
            chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
            reply_markup=KeyboardBuilder.main_menu()
        )
    
    async def handle_balance_command(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /balance"""
        await self.wallet_handler.show_balance(message.chat.id, message.from_user.id)
    
    async def handle_send_command(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /send"""
        await self.transfer_handler.start_send_flow(message.chat.id, message.from_user.id)
    
    async def handle_show_balance_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, None, call.message.chat.id)
        await self.wallet_handler.show_balance(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_send_hkn_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç–ø—Ä–∞–≤–∫–∏ HKN"""
        await self.bot.answer_callback_query(call.id)
        await self.transfer_handler.start_send_flow(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_main_menu_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, None, call.message.chat.id)
        await self.send_or_edit(
            call.message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=KeyboardBuilder.main_menu(),
            message_id=call.message.message_id
        )
    
    async def handle_admin_set_price(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã (–∞–¥–º–∏–Ω)"""
        if message.from_user.id not in self.bot_config.ADMIN_IDS:
            await self.bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        try:
            price = float(message.text.split()[1])  # /setprice 0.0001
            if price <= 0:
                raise ValueError()
            
            await self.ledger_manager.set_token_price(price)
            await self.bot.send_message(
                message.chat.id, 
                f"–¶–µ–Ω–∞ {self.token_config.SYMBOL} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${price:.{self.token_config.DECIMALS}f}"
            )
        except (IndexError, ValueError):
            await self.bot.send_message(
                message.chat.id, 
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprice <—Ü–µ–Ω–∞>\n–ü—Ä–∏–º–µ—Ä: /setprice 0.0001"
            )
    
    async def handle_admin_mint(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —ç–º–∏—Å—Å–∏–∏ (–∞–¥–º–∏–Ω)"""
        if message.from_user.id not in self.bot_config.ADMIN_IDS:
            await self.bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        
        try:
            parts = message.text.split()
            user_id = int(parts[1])
            amount = float(parts[2])
            
            if amount <= 0:
                raise ValueError()
            
            if await self.ledger_manager.mint_tokens(user_id, amount):
                wallet = await self.ledger_manager.get_wallet(user_id)
                name = wallet.display_name if wallet else str(user_id)
                await self.bot.send_message(
                    message.chat.id,
                    f"–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–æ `{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` –¥–ª—è *{name}*.",
                    parse_mode='Markdown'
                )
            else:
                await self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —ç–º–∏—Å—Å–∏–∏.")
        except (IndexError, ValueError):
            await self.bot.send_message(
                message.chat.id,
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mint <user_id> <amount>\n–ü—Ä–∏–º–µ—Ä: /mint 123456789 1000"
            )
    
    # === –ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===
    
    async def handle_history_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, None, call.message.chat.id)
        await self._show_history(call.message.chat.id, call.from_user.id, message_id=call.message.message_id)
    
    async def handle_history_pagination_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏"""
        await self.bot.answer_callback_query(call.id)
        page = int(call.data.split('_')[-1])
        await self._show_history(call.message.chat.id, call.from_user.id, page=page, message_id=call.message.message_id)
    
    async def _show_history(self, chat_id: int, user_id: int, page: int = 0, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        limit = 5
        offset = page * limit
        transactions = await self.ledger_manager.get_transaction_history(user_id, limit, offset)
        
        if not transactions and page == 0:
            text = "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞."
        elif not transactions and page > 0:
            text = "–ë–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç."
        else:
            lines = ["**–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:**"]
            for tx in transactions:
                ts = tx.formatted_timestamp
                desc = tx.description or ""
                direction = tx.get_direction_for_user(user_id)
                
                if tx.is_mint:
                    lines.append(f"‚Ä¢ `{ts}`: `+{tx.amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` ({desc})")
                elif tx.is_burn:
                    lines.append(f"‚Ä¢ `{ts}`: `-{tx.amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` ({desc})")
                else:
                    other_id = tx.sender_id if tx.receiver_id == user_id else tx.receiver_id
                    other_wallet = await self.ledger_manager.get_wallet(other_id)
                    other_info = other_wallet.display_name if other_wallet else f"ID:{other_id}"
                    sign = "+" if direction == "received" else "-"
                    action = "–ø–æ–ª—É—á–µ–Ω–æ –æ—Ç" if direction == "received" else "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                    lines.append(f"‚Ä¢ `{ts}`: `{sign}{tx.amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` {action} {other_info}")
            text = "\n".join(lines)
        
        markup = KeyboardBuilder.history_navigation(page, len(transactions) == limit)
        await self.send_or_edit(chat_id, text, reply_markup=markup, parse_mode='Markdown', message_id=message_id)
    
    # === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–ö–ï–ù–ï ===
    
    async def handle_token_info_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, None, call.message.chat.id)
        await self._show_token_info(call.message.chat.id, call.message.message_id)
    
    async def handle_market_cap_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, None, call.message.chat.id)
        await self._show_market_cap(call.message.chat.id, call.message.message_id)
    
    async def _show_token_info(self, chat_id: int, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ"""
        info = await self.ledger_manager.get_token_info()
        if not info:
            text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        else:
            text = (f"**{info.name} ({info.symbol})**\n"
                   f"–î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏: `{info.decimals}`\n"
                   f"–û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: `{info.total_supply:.{self.token_config.DECIMALS}f} {info.symbol}`\n"
                   f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `${info.current_price:.{self.token_config.DECIMALS}f}`")
        
        await self.send_or_edit(chat_id, text, reply_markup=KeyboardBuilder.token_info(), parse_mode='Markdown', message_id=message_id)
    
    async def _show_market_cap(self, chat_id: int, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é"""
        cap = await self.ledger_manager.calculate_market_cap()
        text = f"–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è {self.token_config.SYMBOL}: `${cap:.2f}`"
        
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_marketcap"),
            InlineKeyboardButton("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        await self.send_or_edit(chat_id, text, reply_markup=markup, parse_mode='Markdown', message_id=message_id)
    
    # === –§–ê–†–ú–ò–ù–ì –ò –°–¢–ï–ô–ö–ò–ù–ì ===
    
    async def handle_go_farming_menu(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ñ–∞—Ä–º–∏–Ω–≥–∞"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, UserStates.FARMING_MENU, call.message.chat.id)
        await self.send_or_edit(call.message.chat.id, "üåæ –ú–µ–Ω—é –§–∞—Ä–º–∏–Ω–≥–∞ –∏ –°—Ç–µ–π–∫–∏–Ω–≥–∞:", reply_markup=KeyboardBuilder.farming_menu(), message_id=call.message.message_id)
    
    async def handle_farm_my_stakes(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–µ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        stakes = await self.ledger_manager.get_user_stakes(user_id)
        
        text = "üìà *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–µ–π–∫–∏:*\n\n"
        if not stakes:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤."
        else:
            for stake in stakes:
                created_at_str = stake['created_at'].strftime('%Y-%m-%d %H:%M') if hasattr(stake['created_at'], 'strftime') else str(stake['created_at'])
                text += (f"üÜî `{stake['stake_id']}`: `{stake['amount']:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` "
                        f"(–æ—Ç {created_at_str})\n"
                        f"   –ù–∞–≥—Ä–∞–¥–∞: `{float(stake['pending_rewards']):.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}`\n\n")
        
        await self.send_or_edit(call.message.chat.id, text, reply_markup=KeyboardBuilder.farming_menu(), parse_mode='Markdown', message_id=call.message.message_id)
    
    async def handle_farm_stake_hkn_prompt(self, call: CallbackQuery):
        """–ó–∞–ø—Ä–æ—Å —Å—É–º–º—ã –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, UserStates.STAKING_AMOUNT, call.message.chat.id)
        await self.send_or_edit(call.message.chat.id, "–ö–∞–∫—É—é —Å—É–º–º—É HKN –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç–µ–π–∫?\n\n(–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)", message_id=call.message.message_id)
    
    async def handle_staking_amount_input(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        try:
            amount = float(message.text.strip())
            if amount <= 0:
                await self.bot.send_message(chat_id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            success, msg = await self.ledger_manager.stake_tokens(user_id, amount)
            await self.bot.send_message(chat_id, msg)
            await self.bot.delete_state(user_id, chat_id)
            await self.bot.send_message(chat_id, "üåæ –ú–µ–Ω—é –§–∞—Ä–º–∏–Ω–≥–∞ –∏ –°—Ç–µ–π–∫–∏–Ω–≥–∞:", reply_markup=KeyboardBuilder.farming_menu())
            await self.bot.set_state(user_id, UserStates.FARMING_MENU, chat_id)
            
        except ValueError:
            await self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    async def handle_farm_unstake_hkn_prompt(self, call: CallbackQuery):
        """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Å—Ç–µ–π–∫–∞ –¥–ª—è unstaking"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        stakes = await self.ledger_manager.get_user_stakes(user_id)
        
        if not stakes:
            await self.send_or_edit(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–µ–π–∫–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=KeyboardBuilder.farming_menu(), message_id=call.message.message_id)
            return
        
        await self.bot.set_state(user_id, UserStates.UNSTAKING_SELECT_STAKE, call.message.chat.id)
        await self.send_or_edit(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–π–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:", reply_markup=KeyboardBuilder.select_stake(stakes, "unstake", self.token_config), message_id=call.message.message_id)
    
    async def handle_unstake_selection(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–µ–π–∫–∞ –¥–ª—è unstaking"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        stake_id = int(call.data.split('_')[-1])
        
        success, msg = await self.ledger_manager.unstake_tokens(user_id, stake_id)
        await self.send_or_edit(call.message.chat.id, msg, message_id=call.message.message_id)
        await self.bot.set_state(user_id, UserStates.FARMING_MENU, call.message.chat.id)
        await self.bot.send_message(call.message.chat.id, "üåæ –ú–µ–Ω—é –§–∞—Ä–º–∏–Ω–≥–∞ –∏ –°—Ç–µ–π–∫–∏–Ω–≥–∞:", reply_markup=KeyboardBuilder.farming_menu())
    
    async def handle_farm_claim_rewards_prompt(self, call: CallbackQuery):
        """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Å—Ç–µ–π–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        stakes = await self.ledger_manager.get_user_stakes(user_id)
        claimable_stakes = [s for s in stakes if float(s.get('pending_rewards', 0.0)) > 0]
        
        if not claimable_stakes:
            await self.send_or_edit(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Å–±–æ—Ä–∞.", reply_markup=KeyboardBuilder.farming_menu(), message_id=call.message.message_id)
            return
        
        await self.bot.set_state(user_id, UserStates.CLAIMING_SELECT_STAKE, call.message.chat.id)
        await self.send_or_edit(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–π–∫ –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥:", reply_markup=KeyboardBuilder.select_stake(claimable_stakes, "claim", self.token_config), message_id=call.message.message_id)
    
    async def handle_claim_rewards_selection(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–µ–π–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        stake_id = int(call.data.split('_')[-1])
        
        success, msg = await self.ledger_manager.claim_rewards(user_id, stake_id)
        await self.send_or_edit(call.message.chat.id, msg, message_id=call.message.message_id)
        await self.bot.set_state(user_id, UserStates.FARMING_MENU, call.message.chat.id)
        await self.bot.send_message(call.message.chat.id, "üåæ –ú–µ–Ω—é –§–∞—Ä–º–∏–Ω–≥–∞ –∏ –°—Ç–µ–π–∫–∏–Ω–≥–∞:", reply_markup=KeyboardBuilder.farming_menu())
    
    # === –ë–£–°–¢–ï–†–´ ===
    
    async def handle_farm_boosters_store(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω –±—É—Å—Ç–µ—Ä–æ–≤"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, UserStates.BOOSTER_STORE, call.message.chat.id)
        
        store_text = "üöÄ **–ú–∞–≥–∞–∑–∏–Ω –£—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π** üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å:"
        boosters = self.ledger_manager.get_available_boosters_info()
        
        if not boosters:
            store_text = "–£—Å–∫–æ—Ä–∏—Ç–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        else:
            for key, b_info in boosters.items():
                store_text += (f"\n\n‚ú® **{b_info['name_ru']}** ‚ú®\n"
                              f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: `{b_info['cost']:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` | "
                              f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: `{b_info['duration_hours']}`—á.\n"
                              f"   –ú–Ω–æ–∂–∏—Ç–µ–ª—å: `x{b_info['multiplier']}`\n   _{b_info['description_ru']}_")
        
        await self.send_or_edit(call.message.chat.id, store_text, reply_markup=KeyboardBuilder.booster_store(boosters, self.token_config), parse_mode='Markdown', message_id=call.message.message_id)
    
    async def handle_buy_booster_prompt(self, call: CallbackQuery):
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –±—É—Å—Ç–µ—Ä–∞"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        booster_key = call.data.replace("buy_booster_", "")
        
        if booster_key not in self.ledger_manager.booster_types:
            await self.send_or_edit(call.message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å.", reply_markup=KeyboardBuilder.booster_store(self.ledger_manager.get_available_boosters_info(), self.token_config), message_id=call.message.message_id)
            return
        
        booster_config = self.ledger_manager.booster_types[booster_key]
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton(f"‚úÖ –î–∞ ({booster_config['cost']:.{self.token_config.DECIMALS}f} HKN)", callback_data=f"confirm_buy_booster_{booster_key}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="go_booster_store_cancel")
        )
        
        await self.bot.set_state(user_id, UserStates.CONFIRM_BUY_BOOSTER, call.message.chat.id)
        await self.send_or_edit(call.message.chat.id, f"–ö—É–ø–∏—Ç—å '{booster_config['name_ru']}' –∑–∞ {booster_config['cost']:.{self.token_config.DECIMALS}f} HKN?", reply_markup=markup, message_id=call.message.message_id)
    
    async def handle_buy_booster_confirmation(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –±—É—Å—Ç–µ—Ä–∞"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        if call.data.startswith("confirm_buy_booster_"):
            booster_key = call.data.replace("confirm_buy_booster_", "")
            success, message_text = await self.ledger_manager.buy_booster(user_id, booster_key)
            final_text = f"{message_text}\n\nüåæ –ú–µ–Ω—é –§–∞—Ä–º–∏–Ω–≥–∞ –∏ –°—Ç–µ–π–∫–∏–Ω–≥–∞:"
        elif call.data == "go_booster_store_cancel":
            final_text = "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\nüåæ –ú–µ–Ω—é –§–∞—Ä–º–∏–Ω–≥–∞ –∏ –°—Ç–µ–π–∫–∏–Ω–≥–∞:"
        
        await self.bot.set_state(user_id, UserStates.FARMING_MENU, chat_id)
        await self.send_or_edit(chat_id, final_text, reply_markup=KeyboardBuilder.farming_menu(), message_id=message_id, parse_mode='Markdown')
    
    # === –ü–†–û–î–ê–ñ–ê HKN ===
    
    async def handle_sell_hkn_prompt(self, call: CallbackQuery):
        """–ó–∞–ø—Ä–æ—Å —Å—É–º–º—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ HKN"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        sell_rate_info = (f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏: 1 HKN = {self.ledger_manager.HKN_SELL_RATE_TO_BOTUSD} BotUSD (–∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ).\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É HKN, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–µ:")
        
        await self.bot.set_state(user_id, UserStates.SELLING_HKN_AMOUNT, chat_id)
        await self.send_or_edit(chat_id, sell_rate_info, message_id=message_id)
    
    async def handle_sell_hkn_amount_input(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ HKN"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        try:
            amount_hkn = float(message.text.strip())
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 50.5).")
            return
        
        success, response_message = await self.ledger_manager.sell_hkn_to_system(user_id, amount_hkn)
        await self.bot.send_message(chat_id, response_message)
        await self.bot.delete_state(user_id, chat_id)
        await self.bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=KeyboardBuilder.main_menu())

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞"""
        try:
            self.logger.info("Bot starting...")
            await self.bot.polling(
                non_stop=True,
                timeout=self.bot_config.POLLING_TIMEOUT
            )
        except Exception as e:
            self.logger.critical(f"Bot polling error: {e}", exc_info=True)
        finally:
            await self.ledger_manager.db_manager.close()
            self.logger.info("Bot stopped.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    bot_config = BotConfig()
    token_config = TokenConfig()
    performance_config = PerformanceConfig()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    db_manager = DatabaseManager(bot_config.DB_PATH, performance_config)
    await db_manager.init_db()
    
    ledger_manager = LedgerManager(db_manager, token_config)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_app = BotApp(bot_config, token_config, ledger_manager)
    await bot_app.start_polling()

if __name__ == "__main__":
    asyncio.run(main())