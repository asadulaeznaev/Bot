"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram –±–æ—Ç HelgyKoin —Å –û–û–ü –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤ 3 —Ä–∞–∑–∞
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any, Union
from abc import ABC, abstractmethod

from telebot.async_telebot import AsyncTeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from telebot.asyncio_filters import StateFilter

from config import BotConfig, TokenConfig, PerformanceConfig
from database import DatabaseManager
from ledger import LedgerManager
from bot_states import UserStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class BaseHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self, bot_app: 'BotApp'):
        self.bot_app = bot_app
        self.bot = bot_app.bot
        self.ledger_manager = bot_app.ledger_manager
        self.token_config = bot_app.token_config
        self.logger = logging.getLogger(self.__class__.__name__)

class KeyboardBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("üí∞ –ú–æ–π –ë–∞–ª–∞–Ω—Å", callback_data="show_balance"),
            InlineKeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å HKN", callback_data="send_hkn"),
            InlineKeyboardButton("üåæ –§–∞—Ä–º–∏–Ω–≥", callback_data="go_farming_menu"),
            InlineKeyboardButton("üè¶ –ü—Ä–æ–¥–∞—Ç—å HKN", callback_data="sell_hkn_prompt"),
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –¢–æ–∫–µ–Ω–µ", callback_data="token_info")
        )
        return markup
    
    @staticmethod
    def token_info() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üìä –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="show_marketcap"),
            InlineKeyboardButton("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        return markup
    
    @staticmethod
    def confirm_send() -> InlineKeyboardMarkup:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_send"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_send")
        )
        return markup
    
    @staticmethod
    def farming_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ñ–∞—Ä–º–∏–Ω–≥–∞"""
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("‚ûï –°—Ç–µ–π–∫–∞—Ç—å HKN", callback_data="farm_stake_hkn"),
            InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å HKN —Å–æ —Å—Ç–µ–π–∫–∞", callback_data="farm_unstake_hkn"),
            InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", callback_data="farm_claim_rewards"),
            InlineKeyboardButton("üìà –ú–æ–∏ –°—Ç–µ–π–∫–∏", callback_data="farm_my_stakes"),
            InlineKeyboardButton("üöÄ –£—Å–∫–æ—Ä–∏—Ç–µ–ª–∏", callback_data="farm_boosters_store"),
            InlineKeyboardButton("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        return markup

class WalletHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ—à–µ–ª—å–∫–æ–º"""
    
    async def show_balance(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        wallet = await self.ledger_manager.get_wallet(user_id)
        if wallet:
            text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: `{wallet.balance:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}`"
        else:
            text = "–í–∞—à –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
        
        await self.bot_app.send_or_edit(
            chat_id, text, 
            reply_markup=KeyboardBuilder.main_menu(), 
            parse_mode='Markdown', 
            message_id=message_id
        )

class TransferHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    
    async def start_send_flow(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        await self.bot.set_state(user_id, UserStates.WAITING_FOR_RECIPIENT, chat_id)
        text = "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ) –∏–ª–∏ username (@username):"
        await self.bot_app.send_or_edit(chat_id, text, message_id=message_id)
    
    async def handle_recipient_input(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        recipient_str = message.text.strip()
        
        try:
            recipient_id, actual_recipient_str = await self._parse_recipient(recipient_str)
            if recipient_id == user_id:
                await self.bot.send_message(chat_id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–±–µ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
                return
        except ValueError as e:
            await self.bot.send_message(chat_id, str(e))
            return
        
        async with self.bot.retrieve_data(user_id, chat_id) as data:
            data['recipient_id'] = recipient_id
            data['recipient_str'] = actual_recipient_str
        
        await self.bot.set_state(user_id, UserStates.WAITING_FOR_AMOUNT, chat_id)
        await self.bot.send_message(chat_id, f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {actual_recipient_str}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    
    async def handle_amount_input(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        try:
            amount = float(message.text.strip())
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        wallet = await self.ledger_manager.get_wallet(user_id)
        if not wallet or not wallet.has_sufficient_balance(amount):
            await self.bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return
        
        async with self.bot.retrieve_data(user_id, chat_id) as data:
            data['amount'] = amount
            recipient_str = data.get('recipient_str', 'Unknown')
        
        text = (f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n"
                f"`{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *{recipient_str}*?")
        
        await self.bot.send_message(
            chat_id, text,
            reply_markup=KeyboardBuilder.confirm_send(),
            parse_mode='Markdown'
        )
        await self.bot.set_state(user_id, UserStates.CONFIRMING_SEND, chat_id)
    
    async def confirm_transfer(self, call: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥"""
        await self.bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        if call.data == 'cancel_send':
            response_text = "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω."
        else:
            async with self.bot.retrieve_data(user_id, chat_id) as data:
                recipient_id = data.get('recipient_id')
                amount = data.get('amount')
                recipient_str = data.get('recipient_str', str(recipient_id))
            
            if not recipient_id or amount is None:
                response_text = "–û—à–∏–±–∫–∞: –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                self.logger.warning(f"Transfer confirmation failed for user {user_id}: missing data")
            else:
                success, op_message = await self.ledger_manager.execute_transfer(user_id, recipient_id, amount)
                if success:
                    response_text = f"–ü–µ—Ä–µ–≤–æ–¥ `{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` –¥–ª—è *{recipient_str}* –≤—ã–ø–æ–ª–Ω–µ–Ω."
                    self.logger.info(f"Transfer successful: {user_id} to {recipient_id}, amount {amount}")
                else:
                    response_text = op_message or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞."
                    self.logger.error(f"Transfer failed: {user_id} to {recipient_id}, amount {amount}. Reason: {op_message}")
        
        await self.bot_app.send_or_edit(
            chat_id, response_text,
            reply_markup=KeyboardBuilder.main_menu(),
            parse_mode='Markdown',
            message_id=message_id
        )
        await self.bot.delete_state(user_id, chat_id)
    
    async def _parse_recipient(self, recipient_str: str) -> tuple[int, str]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        if recipient_str.startswith('@'):
            recipient_username = recipient_str[1:]
            recipient_wallet_row = await self.ledger_manager.db_manager.fetch_one(
                "SELECT user_id, username FROM wallets WHERE username = ?", 
                (recipient_username,)
            )
            if not recipient_wallet_row:
                raise ValueError("–ü–æ–ª—É—á–∞—Ç–µ–ª—å (username) –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ID:")
            return recipient_wallet_row['user_id'], f"@{recipient_wallet_row['username']}"
        else:
            try:
                recipient_id = int(recipient_str)
                recipient_wallet = await self.ledger_manager.get_wallet(recipient_id)
                if not recipient_wallet:
                    raise ValueError("–ü–æ–ª—É—á–∞—Ç–µ–ª—å (ID) –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return recipient_id, recipient_wallet.display_name
            except ValueError:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ username (@):")

class FarmingHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
    
    async def show_farming_menu(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∞—Ä–º–∏–Ω–≥–∞"""
        text = "üåæ *–§–∞—Ä–º–∏–Ω–≥ HelgyKoin*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await self.bot_app.send_or_edit(
            chat_id, text,
            reply_markup=KeyboardBuilder.farming_menu(),
            parse_mode='Markdown',
            message_id=message_id
        )
    
    async def stake_hkn_prompt(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
        await self.bot.set_state(user_id, UserStates.WAITING_FOR_STAKE_AMOUNT, chat_id)
        text = (f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É HKN –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞:\n\n"
                f"–ú–∏–Ω–∏–º—É–º: {self.token_config.MIN_STAKE_AMOUNT} HKN\n"
                f"–ú–∞–∫—Å–∏–º—É–º: {self.token_config.MAX_STAKE_AMOUNT} HKN\n"
                f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {self.token_config.BASE_HOURLY_REWARD_RATE * 100}% –≤ —á–∞—Å")
        await self.bot_app.send_or_edit(chat_id, text, message_id=message_id)
    
    async def handle_stake_amount(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        try:
            amount = float(message.text.strip())
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        success, msg = await self.ledger_manager.stake_tokens(user_id, amount)
        await self.bot.send_message(chat_id, msg)
        
        if success:
            await self.show_farming_menu(chat_id, user_id)
        
        await self.bot.delete_state(user_id, chat_id)
    
    async def show_user_stakes(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–µ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stakes = await self.ledger_manager.get_user_stakes(user_id)
        
        if not stakes:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤."
        else:
            text = "üìà *–í–∞—à–∏ —Å—Ç–µ–π–∫–∏:*\n\n"
            total_staked = 0
            total_rewards = 0
            
            for stake in stakes:
                total_staked += stake['amount']
                total_rewards += stake['pending_rewards']
                text += (f"üÜî –°—Ç–µ–π–∫ #{stake['stake_id']}\n"
                        f"üí∞ –°—É–º–º–∞: {stake['amount']:.{self.token_config.DECIMALS}f} HKN\n"
                        f"üéÅ –ù–∞–≥—Ä–∞–¥—ã: {stake['pending_rewards']:.{self.token_config.DECIMALS}f} HKN\n"
                        f"üìÖ –°–æ–∑–¥–∞–Ω: {stake['created_at'].strftime('%Y-%m-%d %H:%M')}\n\n")
            
            text += f"üìä *–ò—Ç–æ–≥–æ —Å—Ç–µ–π–∫–æ–≤:* {total_staked:.{self.token_config.DECIMALS}f} HKN\n"
            text += f"üèÜ *–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥:* {total_rewards:.{self.token_config.DECIMALS}f} HKN"
        
        await self.bot_app.send_or_edit(
            chat_id, text,
            reply_markup=KeyboardBuilder.farming_menu(),
            parse_mode='Markdown',
            message_id=message_id
        )
    
    async def claim_rewards(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–µ–π–∫–æ–≤"""
        success, msg = await self.ledger_manager.claim_all_rewards(user_id)
        text = f"üéÅ *–°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥*\n\n{msg}"
        
        await self.bot_app.send_or_edit(
            chat_id, text,
            reply_markup=KeyboardBuilder.farming_menu(),
            parse_mode='Markdown',
            message_id=message_id
        )
    
    async def unstake_hkn_prompt(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID —Å—Ç–µ–π–∫–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è"""
        stakes = await self.ledger_manager.get_user_stakes(user_id)
        
        if not stakes:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è."
            await self.bot_app.send_or_edit(
                chat_id, text,
                reply_markup=KeyboardBuilder.farming_menu(),
                message_id=message_id
            )
            return
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–π–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
        for stake in stakes:
            text += (f"üÜî {stake['stake_id']}: {stake['amount']:.{self.token_config.DECIMALS}f} HKN "
                    f"(–Ω–∞–≥—Ä–∞–¥—ã: {stake['pending_rewards']:.{self.token_config.DECIMALS}f})\n")
        
        await self.bot.set_state(user_id, UserStates.WAITING_FOR_UNSTAKE_ID, chat_id)
        await self.bot_app.send_or_edit(chat_id, text, message_id=message_id)
    
    async def handle_unstake_id(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID —Å—Ç–µ–π–∫–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        try:
            stake_id = int(message.text.strip())
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        success, msg = await self.ledger_manager.unstake_tokens(user_id, stake_id)
        await self.bot.send_message(chat_id, msg)
        
        if success:
            await self.show_farming_menu(chat_id, user_id)
        
        await self.bot.delete_state(user_id, chat_id)
    
    async def show_boosters_store(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π"""
        boosters = self.ledger_manager.get_available_boosters_info()
        wallet = await self.ledger_manager.get_wallet(user_id)
        balance = wallet.balance if wallet else 0
        
        text = f"üöÄ *–ú–∞–≥–∞–∑–∏–Ω —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π*\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.{self.token_config.DECIMALS}f} HKN\n\n"
        
        markup = InlineKeyboardMarkup(row_width=1)
        for key, booster in boosters.items():
            can_afford = "‚úÖ" if balance >= booster['cost'] else "‚ùå"
            text += (f"{can_afford} *{booster['name_ru']}*\n"
                    f"üí∞ –¶–µ–Ω–∞: {booster['cost']:.{self.token_config.DECIMALS}f} HKN\n"
                    f"‚ö° –≠—Ñ—Ñ–µ–∫—Ç: x{booster['multiplier']}\n"
                    f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {booster['duration_hours']}—á\n"
                    f"üìù {booster['description_ru']}\n\n")
            
            if balance >= booster['cost']:
                markup.add(InlineKeyboardButton(
                    f"–ö—É–ø–∏—Ç—å {booster['name_ru']}", 
                    callback_data=f"buy_booster_{key}"
                ))
        
        markup.add(InlineKeyboardButton("üåæ –ù–∞–∑–∞–¥ –∫ —Ñ–∞—Ä–º–∏–Ω–≥—É", callback_data="go_farming_menu"))
        
        await self.bot_app.send_or_edit(
            chat_id, text,
            reply_markup=markup,
            parse_mode='Markdown',
            message_id=message_id
        )

class HistoryHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    
    async def show_history(self, chat_id: int, user_id: int, message_id: Optional[int] = None, page: int = 0):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        limit = 5
        offset = page * limit
        transactions = await self.ledger_manager.get_transaction_history(user_id, limit, offset)
        
        if not transactions:
            if page == 0:
                text = "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞."
            else:
                text = "üìú –ë–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç."
            
            markup = InlineKeyboardMarkup()
            if page > 0:
                markup.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_page_{page-1}"))
            markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        else:
            text = f"üìú *–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π* (—Å—Ç—Ä. {page + 1})\n\n"
            
            for tx in transactions:
                direction = tx.get_direction_for_user(user_id)
                if direction == "received":
                    if tx.is_mint:
                        icon = "üéÅ"
                        desc = "–ü–æ–ª—É—á–µ–Ω–æ (—ç–º–∏—Å—Å–∏—è)"
                    else:
                        icon = "üì•"
                        desc = "–ü–æ–ª—É—á–µ–Ω–æ"
                elif direction == "sent":
                    if tx.is_burn:
                        icon = "üî•"
                        desc = "–°–æ–∂–∂–µ–Ω–æ"
                    else:
                        icon = "üì§"
                        desc = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                else:
                    icon = "‚ùì"
                    desc = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                text += (f"{icon} *{desc}*\n"
                        f"üí∞ {tx.amount:.{self.token_config.DECIMALS}f} HKN\n"
                        f"üìÖ {tx.formatted_timestamp}\n")
                
                if tx.description:
                    text += f"üìù {tx.description}\n"
                text += "\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            markup = InlineKeyboardMarkup(row_width=3)
            buttons = []
            if page > 0:
                buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"history_page_{page-1}"))
            
            buttons.append(InlineKeyboardButton(f"{page + 1}", callback_data="noop"))
            
            if len(transactions) == limit:  # –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"history_page_{page+1}"))
            
            markup.add(*buttons)
            markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        await self.bot_app.send_or_edit(
            chat_id, text,
            reply_markup=markup,
            parse_mode='Markdown',
            message_id=message_id
        )

class TokenInfoHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""
    
    async def show_token_info(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ"""
        token_info = await self.ledger_manager.get_token_info()
        
        if not token_info:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ."
        else:
            text = (f"‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {token_info.name}*\n\n"
                   f"üè∑Ô∏è –°–∏–º–≤–æ–ª: {token_info.symbol}\n"
                   f"üí∞ –û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {token_info.total_supply:,.{token_info.decimals}f}\n"
                   f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${token_info.current_price:.{token_info.decimals}f}\n"
                   f"üìä –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${token_info.market_cap:,.2f}\n"
                   f"üî¢ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏: {token_info.decimals}")
        
        await self.bot_app.send_or_edit(
            chat_id, text,
            reply_markup=KeyboardBuilder.token_info(),
            parse_mode='Markdown',
            message_id=message_id
        )
    
    async def show_market_cap(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é"""
        market_cap = await self.ledger_manager.calculate_market_cap()
        text = f"üìä *–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è HelgyKoin*\n\nüí∞ ${market_cap:,.2f}"
        
        await self.bot_app.send_or_edit(
            chat_id, text,
            reply_markup=KeyboardBuilder.token_info(),
            parse_mode='Markdown',
            message_id=message_id
        )

class SellHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    async def sell_hkn_prompt(self, chat_id: int, user_id: int, message_id: Optional[int] = None):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        wallet = await self.ledger_manager.get_wallet(user_id)
        if not wallet:
            text = "‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            await self.bot_app.send_or_edit(chat_id, text, message_id=message_id)
            return
        
        text = (f"üè¶ *–ü—Ä–æ–¥–∞–∂–∞ HKN*\n\n"
               f"–í–∞—à –±–∞–ª–∞–Ω—Å: {wallet.balance:.{self.token_config.DECIMALS}f} HKN\n"
               f"–ö—É—Ä—Å: 1 HKN = 0.00005 BotUSD\n\n"
               f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HKN –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:")
        
        await self.bot.set_state(user_id, UserStates.WAITING_FOR_SELL_AMOUNT, chat_id)
        await self.bot_app.send_or_edit(chat_id, text, parse_mode='Markdown', message_id=message_id)
    
    async def handle_sell_amount(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        try:
            amount = float(message.text.strip())
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            await self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        success, msg = await self.ledger_manager.sell_hkn_to_system(user_id, amount)
        await self.bot.send_message(chat_id, msg)
        
        if success:
            await self.bot.send_message(
                chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=KeyboardBuilder.main_menu()
            )
        
        await self.bot.delete_state(user_id, chat_id)

class BotApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ —Å –û–û–ü –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self, bot_config: BotConfig, token_config: TokenConfig, ledger_manager: LedgerManager):
        self.bot_config = bot_config
        self.token_config = token_config
        self.ledger_manager = ledger_manager
        self.bot = AsyncTeleBot(bot_config.BOT_TOKEN)
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.wallet_handler = WalletHandler(self)
        self.transfer_handler = TransferHandler(self)
        self.farming_handler = FarmingHandler(self)
        self.history_handler = HistoryHandler(self)
        self.token_info_handler = TokenInfoHandler(self)
        self.sell_handler = SellHandler(self)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.bot.add_custom_filter(StateFilter(self.bot))
        self._register_handlers()
        
        self.logger.info("BotApp initialized with optimized architecture")
    
    async def send_or_edit(self, chat_id: int, text: str, reply_markup=None, parse_mode=None, message_id=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if message_id:
                await self.bot.edit_message_text(
                    text, chat_id, message_id, 
                    reply_markup=reply_markup, 
                    parse_mode=parse_mode
                )
            else:
                await self.bot.send_message(
                    chat_id, text, 
                    reply_markup=reply_markup, 
                    parse_mode=parse_mode
                )
        except Exception as e:
            self.logger.error(f"Error in send_or_edit: {e}")
            if "message is not modified" not in str(e).lower() and message_id:
                try:
                    await self.bot.send_message(
                        chat_id, text, 
                        reply_markup=reply_markup, 
                        parse_mode=parse_mode
                    )
                except Exception as e2:
                    self.logger.error(f"Fallback send_message failed: {e2}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['start'])(self.handle_start)
        self.bot.message_handler(commands=['cancel'], state='*')(self.handle_cancel)
        self.bot.message_handler(commands=['balance'])(self.handle_balance_command)
        self.bot.message_handler(commands=['send'])(self.handle_send_command)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –æ—Å–Ω–æ–≤–Ω—ã–µ
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_balance')(self.handle_show_balance_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'send_hkn')(self.handle_send_hkn_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'main_menu')(self.handle_main_menu_callback)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - —Ñ–∞—Ä–º–∏–Ω–≥
        self.bot.callback_query_handler(func=lambda call: call.data == 'go_farming_menu')(self.handle_farming_menu_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_stake_hkn')(self.handle_stake_hkn_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_unstake_hkn')(self.handle_unstake_hkn_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_claim_rewards')(self.handle_claim_rewards_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_my_stakes')(self.handle_my_stakes_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'farm_boosters_store')(self.handle_boosters_store_callback)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –±—É—Å—Ç–µ—Ä—ã
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('buy_booster_'))(self.handle_buy_booster_callback)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –∏—Å—Ç–æ—Ä–∏—è
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_history')(self.handle_history_callback)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('history_page_'))(self.handle_history_page_callback)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
        self.bot.callback_query_handler(func=lambda call: call.data == 'token_info')(self.handle_token_info_callback)
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_marketcap')(self.handle_marketcap_callback)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –ø—Ä–æ–¥–∞–∂–∞
        self.bot.callback_query_handler(func=lambda call: call.data == 'sell_hkn_prompt')(self.handle_sell_hkn_prompt_callback)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
        self.bot.callback_query_handler(func=lambda call: call.data == 'noop')(self.handle_noop_callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.bot.message_handler(state=UserStates.WAITING_FOR_RECIPIENT)(self.transfer_handler.handle_recipient_input)
        self.bot.message_handler(state=UserStates.WAITING_FOR_AMOUNT)(self.transfer_handler.handle_amount_input)
        self.bot.callback_query_handler(
            func=lambda call: call.data in ['confirm_send', 'cancel_send'], 
            state=UserStates.CONFIRMING_SEND
        )(self.transfer_handler.confirm_transfer)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞
        self.bot.message_handler(state=UserStates.WAITING_FOR_STAKE_AMOUNT)(self.farming_handler.handle_stake_amount)
        self.bot.message_handler(state=UserStates.WAITING_FOR_UNSTAKE_ID)(self.farming_handler.handle_unstake_id)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        self.bot.message_handler(state=UserStates.WAITING_FOR_SELL_AMOUNT)(self.sell_handler.handle_sell_amount)
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['setprice'])(self.handle_admin_set_price)
        self.bot.message_handler(commands=['mint'])(self.handle_admin_mint)
        
        self.logger.info("All handlers registered successfully")
    
    async def handle_start(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
        user_id = message.from_user.id
        username = message.from_user.username
        
        wallet = await self.ledger_manager.get_wallet(user_id)
        if not wallet:
            await self.ledger_manager.create_wallet(user_id, username)
            text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HelgyKoin! "
                   f"–í–∞—à –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω, –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ "
                   f"{self.token_config.STARTUP_BONUS:.{self.token_config.DECIMALS}f} "
                   f"{self.token_config.SYMBOL} –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞.")
        else:
            text = "–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
        
        await self.bot.send_message(
            user_id, text, 
            reply_markup=KeyboardBuilder.main_menu()
        )
    
    async def handle_cancel(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        await self.bot.delete_state(user_id, chat_id)
        await self.bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await self.bot.send_message(
            chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
            reply_markup=KeyboardBuilder.main_menu()
        )
    
    async def handle_balance_command(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /balance"""
        await self.wallet_handler.show_balance(message.chat.id, message.from_user.id)
    
    async def handle_send_command(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /send"""
        await self.transfer_handler.start_send_flow(message.chat.id, message.from_user.id)
    
    async def handle_show_balance_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, None, call.message.chat.id)
        await self.wallet_handler.show_balance(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_send_hkn_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç–ø—Ä–∞–≤–∫–∏ HKN"""
        await self.bot.answer_callback_query(call.id)
        await self.transfer_handler.start_send_flow(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_main_menu_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, None, call.message.chat.id)
        await self.send_or_edit(
            call.message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=KeyboardBuilder.main_menu(),
            message_id=call.message.message_id
        )
    
    async def handle_admin_set_price(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã (–∞–¥–º–∏–Ω)"""
        if message.from_user.id not in self.bot_config.ADMIN_IDS:
            await self.bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        try:
            price = float(message.text.split()[1])  # /setprice 0.0001
            if price <= 0:
                raise ValueError()
            
            await self.ledger_manager.set_token_price(price)
            await self.bot.send_message(
                message.chat.id, 
                f"–¶–µ–Ω–∞ {self.token_config.SYMBOL} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${price:.{self.token_config.DECIMALS}f}"
            )
        except (IndexError, ValueError):
            await self.bot.send_message(
                message.chat.id, 
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprice <—Ü–µ–Ω–∞>\n–ü—Ä–∏–º–µ—Ä: /setprice 0.0001"
            )
    
    async def handle_admin_mint(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —ç–º–∏—Å—Å–∏–∏ (–∞–¥–º–∏–Ω)"""
        if message.from_user.id not in self.bot_config.ADMIN_IDS:
            await self.bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        
        try:
            parts = message.text.split()
            user_id = int(parts[1])
            amount = float(parts[2])
            
            if amount <= 0:
                raise ValueError()
            
            if await self.ledger_manager.mint_tokens(user_id, amount):
                wallet = await self.ledger_manager.get_wallet(user_id)
                name = wallet.display_name if wallet else str(user_id)
                await self.bot.send_message(
                    message.chat.id,
                    f"–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–æ `{amount:.{self.token_config.DECIMALS}f} {self.token_config.SYMBOL}` –¥–ª—è *{name}*.",
                    parse_mode='Markdown'
                )
            else:
                await self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —ç–º–∏—Å—Å–∏–∏.")
        except (IndexError, ValueError):
            await self.bot.send_message(
                message.chat.id,
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mint <user_id> <amount>\n–ü—Ä–∏–º–µ—Ä: /mint 123456789 1000"
            )
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞"""
        try:
            self.logger.info("Bot starting...")
            await self.bot.polling(
                non_stop=True,
                timeout=self.bot_config.POLLING_TIMEOUT
            )
        except Exception as e:
            self.logger.critical(f"Bot polling error: {e}", exc_info=True)
        finally:
            await self.ledger_manager.db_manager.close()
            self.logger.info("Bot stopped.")

    # === –ù–æ–≤—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
    
    async def handle_farming_menu_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –º–µ–Ω—é —Ñ–∞—Ä–º–∏–Ω–≥–∞"""
        await self.bot.answer_callback_query(call.id)
        await self.bot.set_state(call.from_user.id, None, call.message.chat.id)
        await self.farming_handler.show_farming_menu(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_stake_hkn_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å—Ç–µ–π–∫–∏–Ω–≥–∞ HKN"""
        await self.bot.answer_callback_query(call.id)
        await self.farming_handler.stake_hkn_prompt(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_unstake_hkn_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å–Ω—è—Ç–∏—è —Å—Ç–µ–π–∫–∞"""
        await self.bot.answer_callback_query(call.id)
        await self.farming_handler.unstake_hkn_prompt(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_claim_rewards_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥"""
        await self.bot.answer_callback_query(call.id)
        await self.farming_handler.claim_rewards(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_my_stakes_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ–∫–∞–∑–∞ —Å—Ç–µ–π–∫–æ–≤"""
        await self.bot.answer_callback_query(call.id)
        await self.farming_handler.show_user_stakes(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_boosters_store_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –º–∞–≥–∞–∑–∏–Ω–∞ —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π"""
        await self.bot.answer_callback_query(call.id)
        await self.farming_handler.show_boosters_store(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_buy_booster_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ–∫—É–ø–∫–∏ —É—Å–∫–æ—Ä–∏—Ç–µ–ª—è"""
        await self.bot.answer_callback_query(call.id)
        booster_key = call.data.replace('buy_booster_', '')
        success, msg = await self.ledger_manager.buy_booster(call.from_user.id, booster_key)
        
        text = f"üöÄ *–ü–æ–∫—É–ø–∫–∞ —É—Å–∫–æ—Ä–∏—Ç–µ–ª—è*\n\n{msg}"
        await self.send_or_edit(
            call.message.chat.id, text,
            reply_markup=KeyboardBuilder.farming_menu(),
            parse_mode='Markdown',
            message_id=call.message.message_id
        )
    
    async def handle_history_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∏—Å—Ç–æ—Ä–∏–∏"""
        await self.bot.answer_callback_query(call.id)
        await self.history_handler.show_history(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_history_page_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏"""
        await self.bot.answer_callback_query(call.id)
        page = int(call.data.replace('history_page_', ''))
        await self.history_handler.show_history(
            call.message.chat.id, call.from_user.id, call.message.message_id, page
        )
    
    async def handle_token_info_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""
        await self.bot.answer_callback_query(call.id)
        await self.token_info_handler.show_token_info(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_marketcap_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        await self.bot.answer_callback_query(call.id)
        await self.token_info_handler.show_market_cap(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_sell_hkn_prompt_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø—Ä–æ–¥–∞–∂–∏ HKN"""
        await self.bot.answer_callback_query(call.id)
        await self.sell_handler.sell_hkn_prompt(
            call.message.chat.id, call.from_user.id, call.message.message_id
        )
    
    async def handle_noop_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        await self.bot.answer_callback_query(call.id)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    bot_config = BotConfig()
    token_config = TokenConfig()
    performance_config = PerformanceConfig()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    db_manager = DatabaseManager(bot_config.DB_PATH, performance_config)
    await db_manager.init_db()
    
    ledger_manager = LedgerManager(db_manager, token_config)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_app = BotApp(bot_config, token_config, ledger_manager)
    await bot_app.start_polling()

if __name__ == "__main__":
    asyncio.run(main())